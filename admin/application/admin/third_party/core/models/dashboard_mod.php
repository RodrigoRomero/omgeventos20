<?phpif (!defined('BASEPATH')) exit('No direct script access allowed');error_reporting(E_ALL ^ E_NOTICE);/** * @author Rodrigo Romero * @version 1.0.0 *  *  TODO: LOG */class dashboard_mod extends RR_Model {	public function __construct() {	    		parent::__construct();            }        public function lastAcreditados(){        $this->db->select('a.nombre, a.apellido, c.empresa', false);           $this->db->where('a.status >=',0);                $this->db->where('a.evento_id',$this->evento_id);        $this->db->join('customers c', 'c.id = a.customer_id','LEFT');     #   $this->db->join('pagos p', 'p.acreditado_id = a.id','LEFT');        $this->db->from('acreditados a');        $this->db->limit(10);        $this->db->order_by('a.id','DESC');        $query = $this->db->get();        $result = $query->result();                $box_header = $this->view('layout/panels/box_header', array('title'=>'Ãšltimos 10 Acreditados', 'icon'=>'icon-user', 'box_icon'=>true));        $box_content = '<ul class="unstyled">';        foreach($result as $usuario){            $box_content .= '<li><b>'.$usuario->empresa.'</b> - '.$usuario->nombre.' '.$usuario->apellido.'</li>';        }        $box_content .= '</ul>';        $box = $this->view('layout/panels/box', array('box_header'=>$box_header,'box_content'=>$box_content));        return $box;    }    //SELECT COUNT(id) total_by_date, DATE_FORMAT(fa, '%Y/%m/%d') fa FROM acreditados GROUP BY DATE_FORMAT(fa, '%Y/%m/%d')    public function getSmallStats(){       // $recaudado    = $this->getSmall('recaudado');        $suscriptores = $this->getSmall('suscriptores');        $smallStats = $recaudado.$suscriptores;        return $smallStats;    }    public function getTotal(){        $sql = "SELECT COUNT(id) total FROM acreditados WHERE status >= 0 AND evento_id = $this->evento_id";        $total = $this->db->query($sql)->row();        return $total;    }        public function getTotalActive(){        $sql = "SELECT COUNT(id) total FROM acreditados WHERE status = 1 AND evento_id = $this->evento_id";        $total = $this->db->query($sql)->row();        return $total;    }        public function getTotalActiveCheckins(){        $sql = "SELECT COUNT(id) total FROM acreditados WHERE status = 1 AND acreditado = 1 AND evento_id = $this->evento_id";        $total = $this->db->query($sql)->row();        return $total;    }    public function getTotalLunch(){        $sql = "SELECT COUNT(id) total FROM acreditados WHERE status >= 1  AND evento_id = $this->evento_id and lunch = 1";        $total = $this->db->query($sql)->row();        return $total;    }    private function getSmall($tipo){       /*        switch($tipo){            case 'recaudado':                            $this->db->where_in('pago_status',array(1,2));                $this->db->select_sum('transaction_amount','value');                $query = $this->db->get('pagos')->row();                $icon  = 'icon-money';                $color = 'blue';                $title = $tipo;                $value = $query->value;                  $this->db->flush_cache();                      break;            case 'suscriptores':                            $this->db->where('number.status',1);                $this->db->from('acreditados number');                $value = $this->db->count_all()->row();                  echo $value;                              $this->db->flush_cache();                $icon  = 'icon-user';                $color = 'blue';                $title = $tipo;                lq();                        break;        }        return $this->view('layout/panels/smallstats',array('value'=>$value, 'icon'=>$icon, 'color'=>$color, 'title'=>$title));        */            }    public function getInscriptosChart() {        $evento = $this->db->get_where('eventos',array('status'=>1))->row();        if(count($evento)>0){            $sql = "SELECT COUNT(id) total_by_date, DATE_FORMAT(fa, '%d-%m-%Y') fa FROM acreditados WHERE status >= 0  AND evento_id = $this->evento_id GROUP BY DATE_FORMAT(fa, '%d-%m-%Y')";            $inscriptos = $this->db->query($sql)->result();                    $fechainicio = date('Y-m-d',strtotime($evento->fa." - 1 day"));            $fechafin    = date('Y-m-d',strtotime($evento->fecha_baja));            $arrayFechas = $this->devuelveArrayFechasEntreOtrasDos($fechainicio,$fechafin);            $values = array();            if(count($inscriptos)>0){                foreach($inscriptos as $registro){                        $registros = ($registro->total_by_date) ? $registro->total_by_date : 0;                                                $values[] = array($registro->fa, (int)$registros);                }                } else {                    $values[] = array(date('Y-m-d'),0);                }        $success      = true;        $responseType = 'function';        $function     = 'initChart';        $messages     = $values;        $data = array('success' => $success, 'responseType'=>$responseType, 'messages'=>$messages, 'value'=>$function);        return $data;        } else {            $success      = false;            $data = array('success' => $success);            return $data;        }    }     public function devuelveArrayFechasEntreOtrasDos($fechaInicio, $fechafin){        $arrayFechas=array();        $fechaMostrar = $fechaInicio;            while(strtotime($fechaMostrar) <= strtotime($fechafin)) {                                $fechaMostrar = date("d-m-Y", strtotime($fechaMostrar . " + 1 day"));                $arrayFechas[]=$fechaMostrar;            }            return $arrayFechas;    }                public function getTotalCheckInByTipo(){                        $sql = "SELECT                 COUNT(a.id) totals, ot.nombre, ot.ticket_id, a.`order_id`                FROM acreditados a                LEFT JOIN (SELECT o.id, o.`ticket_id`, t.`nombre`                       FROM orders o                       INNER JOIN tickets t ON t.id = o.`ticket_id` ) ot  ON ot.id = a.`order_id`                WHERE a.`evento_id` =  $this->evento_id                AND a.`acreditado` = 1                     GROUP BY  ot.ticket_id";        $totals = $this->db->query($sql)->result();                return array('totales' =>$totals);            }    public function avgCheckIn(){        $sql = "SELECT AVG(acreditado) total FROM acreditados WHERE evento_id = $this->evento_id";       $total = $this->db->query($sql)->row();              return $total;              }        public function cuponsStats(){        $sql = "SELECT CONCAT(COUNT(o.id),'/',c.quantity) quantity_used, c.nombre         FROM orders o         LEFT JOIN cupons c ON c.code = o.discount_code         WHERE o.evento_id = $this->evento_id         AND o.discount_code != ''         GROUP BY c.nombre";                  $result = $this->db->query($sql)->result();                return $result;    }        public function getTotalByMedioPago(){        $sql ="SELECT COUNT(id) total, gateway FROM orders WHERE STATUS >= 0  AND evento_id = $this->evento_id GROUP BY gateway";        $total_medio_pago = $this->db->query($sql)->result();        return $total_medio_pago;    }    public function getTotalByTicket(){        $sql ="SELECT COUNT(o.id) total, tickets.nombre               FROM orders o               LEFT JOIN tickets ON tickets.id = o.ticket_id               WHERE o.evento_id = $this->evento_id               GROUP BY ticket_id               ORDER BY  COUNT(o.id) DESC";        $total_tickets = $this->db->query($sql)->result();        return $total_tickets;    }    public function getBarsByTicket(){        $sql ="SELECT o.evento_id, COUNT(o.id) total, t.nombre, t.background               FROM orders o               LEFT JOIN tickets t ON t.id = o.ticket_id                WHERE o.evento_id = $this->evento_id                GROUP BY o.ticket_id,               o.evento_id";        $total_tickets = $this->db->query($sql)->result();        #$header = array(array("Ticket", "Total"));       # ep($header);        $values = array();        foreach($total_tickets as $tkt){            $values[] = array(ucwords($tkt->nombre), (int)$tkt->total, '#'.$tkt->background);        }           $success      = true;        $responseType = 'function';        $function     = 'initBarTickets';        //$messages     = array_merge($header,$values);        $data = array('success' => $success, 'responseType'=>$responseType, 'messages'=>$values, 'value'=>$function);        return $data;    }       public function getFacturacionTotal(){        $sql ="SELECT SUM(o.total_discounted_price) total FROM orders o INNER JOIN pagos p ON p.order_id = o.id WHERE o.status >=0";        $total_facturacion = $this->db->query($sql)->row();        return $total_facturacion;    }    public function getFacturacionTotalStatus(){        $total_facturacion = $this->getFacturacionTotal();                $sql = "SELECT SUM(o.total_discounted_price) total FROM orders o INNER JOIN pagos p ON p.order_id = o.id WHERE o.status >=1 AND p.pago_status = -1  AND o.evento_id = $this->evento_id";        $total_facturacion_pendiente = $this->db->query($sql)->row();               $sql = "SELECT SUM(o.total_discounted_price) total FROM orders o INNER JOIN pagos p ON p.order_id = o.id WHERE o.status >=1 AND p.pago_status = 1  AND o.evento_id = $this->evento_id";        $total_facturacion_aprobada = $this->db->query($sql)->row();               $sql = "SELECT SUM(o.total_discounted_price) total FROM orders o INNER JOIN pagos p ON p.order_id = o.id WHERE o.status >=1 AND p.pago_status = 3  AND o.evento_id = $this->evento_id";        $total_facturacion_rechazada = $this->db->query($sql)->row();               return array('total'=> ($total_facturacion->total) ? $total_facturacion->total : 0,                      'facturacion_pendiente'=> ($total_facturacion_pendiente->total) ? $total_facturacion_pendiente->total : 0,                                          'facturacion_aprobada'=> ($total_facturacion_aprobada->total) ? $total_facturacion_aprobada->total : 0,                       'facturacion_rechazada'=>($total_facturacion_rechazada->total) ? $total_facturacion_rechazada->total : 0);    }    public function getFacturacionPendienteByMedio(){        $sql ="SELECT SUM(o.total_discounted_price) total, o.gateway FROM orders o INNER JOIN pagos p ON p.order_id = o.id WHERE o.status >=1 AND p.pago_status = -1 AND o.evento_id = $this->evento_id GROUP BY o.gateway";        $total_facturacion_pendiente_medio = $this->db->query($sql)->result();        return $total_facturacion_pendiente_medio;    }    public function getInscriptosPlanesPie(){        $evento = $this->db->get_where('eventos',array('status'=>1, 'id'=>$this->evento_id))->row();        $header = array(array('Tipo','Value'));               if(count($evento)>0){            $sql = "SELECT t.nombre, o.totals, t.id                    FROM tickets t                    LEFT JOIN (SELECT COUNT(id) totals, ticket_id FROM orders  GROUP BY ticket_id) o ON o.ticket_id = t.id                    WHERE t.evento_id = $evento->id  AND t.id = o.ticket_id";                            $acreditados = $this->db->query($sql)->result();            $values = array();            foreach($acreditados as $acreditado){                $values[] = array($acreditado->nombre, (int)$acreditado->totals);            }        $success      = true;        $responseType = 'function';        $function     = 'intiPiePlanes';        $messages     = array_merge($header,$values);        $data = array('success' => $success, 'responseType'=>$responseType, 'messages'=>$messages, 'value'=>$function);        return $data;        } else {            return false;        }    }    public function getInscriptosPagosPie(){                $this->db->from('orders');        $this->db->where('status >=',0);        $total = $this->db->count_all_results();        $sql = "SELECT COUNT(id) total_pagantes FROM orders WHERE STATUS >= 0 AND total_discounted_price > 0  AND evento_id = $this->evento_id";        $pagantes_q = $this->db->query($sql)->row();        $pagantes = (int) $pagantes_q->total_pagantes;        $no_pagantes = (int)($total-$pagantes_q->total_pagantes);        $header = array(array('Tipo','Value'));        $pagos = array(array('Pagantes',$pagantes),                       array('No Pagantes',$no_pagantes)                                                            );        $pagos = array_merge($header,$pagos);        $success      = true;        $responseType = 'function';        $function     = 'intiPiePagos';        $messages     = $pagos;        $data = array('success' => $success, 'responseType'=>$responseType, 'messages'=>$messages, 'value'=>$function);        return $data;    }}