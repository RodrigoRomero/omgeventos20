<?phpif (!defined('BASEPATH')) exit('No direct script access allowed');error_reporting(E_ALL ^ E_NOTICE);/** * @author Rodrigo Romero * @version 1.0.0 *  */class account_mod extends RR_Model {    private $payment_enabled;    private $cupons_enabled;    private $evento_name;    public function __construct() {        parent::__construct();        $this->load->model('eventos_mod','Evento');        $this->load->model('email_mod','Email');        $this->load->model('cupons_mod','Cupons');        $this->load->model('payments_mod','MP');        $this->_setConfig();    }    private function _setConfig(){        $evento = $this->Evento->getEvento();        $this->payment_enabled = $evento->payments_enabled;        $this->evento_name = $evento->nombre;        $this->cupons_enabled = $evento->cupons_enabled;        }        public function getAccountBySalt(){        $this->db->select('c.*', false)                         ->from('customers c')                         ->where('o.salt', $this->session->userdata('cart_salt'))                         ->where('o.evento_id', $this->evento_id)                         ->join('orders o', 'o.customer_id = c.id','LEFT');        $user = $this->db->get()->row();        return $user;    }    public function doCreateAccount(){      #VALIDO FORM POR PHP               $success = 'false';      $config = array();      $config[1] = array('field'=>'nombre', 'label'=>'Nombre', 'rules'=>'trim|required|xss_clean');      $config[2] = array('field'=>'apellido', 'label'=>'Apellido', 'rules'=>'trim|required|xss_clean');               $config[3] = array('field'=>'empresa', 'label'=>'Empresa', 'rules'=>'trim|required|xss_clean');      $config[4] = array('field'=>'email', 'label'=>'Email', 'rules'=>'trim|required|xss_clean|valid_email');               $this->form_validation->set_rules($config);            if($this->form_validation->run()==FALSE){        $this->form_validation->set_error_delimiters('<li>', '</li>');        $responseType = 'function';        $function     = 'appendFormMessagesModal';        $messages     = $this->view('alerts/modal_alerts',array('texto'=>validation_errors(), 'title'=>'Formulario de Contacto', 'class_type'=>'error'));        $data = array('success' => $success, 'responseType'=>$responseType, 'html'=>$messages, 'value'=>$function);      } else {        try{          $this->db->trans_start();           #VERIFICO QUE LA EMPRESA NO ESTE CREADA          $c_nombre = filter_input(INPUT_POST,'nombre');          $c_apellido = filter_input(INPUT_POST,'apellido');          $c_cargo = filter_input(INPUT_POST,'cargo');          $c_dni = filter_input(INPUT_POST,'dni');          $c_fecha_nacimiento = filter_input(INPUT_POST,'edad');          $c_telefono = filter_input(INPUT_POST,'telefono');          $c_conocio = filter_input(INPUT_POST,'conocio');          $c_enterprise = filter_input(INPUT_POST,'empresa');          $c_email = filter_input(INPUT_POST,'email');          $c_newsletter = 0;          $customer = $this->_validateEntreprise($c_enterprise, $c_email);          $this->db->flush_cache();          if(!$customer['total']){            if(!empty($c_fecha_nacimiento)){              $date =  DateTime::createFromFormat("d/m/Y", $c_fecha_nacimiento);              $c_fecha_nacimiento = $date->format('Y-m-d');            };            $customer_data = ['empresa' => $c_enterprise,               'cargo' => $c_cargo,              'nombre' => $c_nombre,              'apellido' => $c_apellido,              'fecha_nacimiento' =>  ($c_fecha_nacimiento) ? $c_fecha_nacimiento : null,              'dni'   => $c_dni,              'email' => $c_email,              'telefono' => $c_telefono,              'conocio' => $c_conocio,              'newsletter' => $c_newsletter,              'password' => md5(strtolower($c_dni)),              'status' => 1            ];            $values  = array_merge($customer_data, $this->i);                                           $this->db->insert('customers', $values);            $customer_data = (object) $values;            $customer_data->id = $this->db->insert_id();                    } else {            $customer_data = $customer['data'];          }          #GENERO LA ORDEN          $ticket = '';          $discount_code = '';          $quantity = 0;          $item_price = 0;          $discount_amount = 0;          $nominar = 0;          foreach ($this->cart->contents() as $key => $row) {            if(preg_match('/^code/', $row['id'], $matches) === 1){              $discount_code = $row['options']['code'];                  $discount_amount = $row['subtotal'];            }  else {              $nominar    = $row['options']['nominar'];              $item_price = $row['price'];              $quantity   = $row['qty'];              $ticket     = $row['options']['ticket_id'];            }          }          $values = ['customer_id'      => $customer_data->id,            'evento_id'        => $this->evento_id,            'ticket_id'        => $ticket,            'full_cart'        => json_encode($this->cart->contents()),            'gateway'          => ($this->session->userdata('cart_medio_pago')) ? $this->session->userdata('cart_medio_pago') : 'FOC',            'item_price'       => $item_price,            'quantity'         => $quantity,            'total_price'      => $item_price*$quantity,            'discount_code'    => $discount_code,            'discount_amount'  => $discount_amount,            'total_discounted_price' => $this->cart->total()          ];          $values  = array_merge($values, $this->i);          ep($values);          $this->db->insert('orders',$values);          $order_data = (object) $values;          $order_data->id = $this->db->insert_id();          $codeGenerated = $this->_getCode($order_data->id);            $this->db->where('id', $order_data->id);          $this->db->update('orders',array('salt'=>md5($codeGenerated)));          $order_data->barcode = $codeGenerated;          $this->session->set_userdata('cart_order',$order_data->id);          #GENERO EL PAYMENT TRANSACTION -1 SIN REGISTRO          $payment = array(            'order_id'            => $order_data->id,             'payment_type'        => $order_data->gateway,            'transaction_amount'  => $this->cart->total(),            'currency_id'         => 'ARS',            'pago_status'         => ($order_data->gateway == 'FOC') ? 1 : '-1',             'status'              => ($order_data->gateway == 'FOC') ? 'approved' : 'in progress',          );          $this->db->insert('pagos',$payment);           #BAJO EL CODIGO DE DESCUENTO          if(!empty($discount_code))          $this->Cupons->validate($discount_code,true);          $acreditados_last_id = $this->db->select_max('id')->get('acreditados')->row()->id;          $nominar_batch = [];          for($i=1;$i<=$nominar; $i++){            $acreditados_last_id++;            $data = ['customer_id' => $customer_data->id,              'evento_id'   => $this->evento_id,              'order_id'    => $order_data->id,              'nombre'      => $_POST['acreditado_nombre'][$i],              'apellido'    => $_POST['acreditado_apellido'][$i],              'email'       => $_POST['acreditado_email'][$i],              'barcode'     => $this->_getCode($acreditados_last_id),              'reminder'    => 0,              'acreditado'  => 0,              'status'      => 1            ];            array_push($nominar_batch, array_merge($data, $this->i));          }          $this->db->insert_batch('acreditados', $nominar_batch);           $transact = $this->db->trans_complete();          if($transact){            switch ($order_data->gateway) {              case 'mercado_pago':                $data   = $this->MP->getPreferences($order_data);                break;            case 'transferencia_bancaria':              $subject    = "PreAcreditación ".$this->evento_name;              foreach($nominar_batch as $k => $v){                $user_info  = (object) $v;                $user_email = $user_info->email;                  $body       = $this->view('email/pago_transferencia_bancaria', array('user_info'=>$user_info, 'evento'=>$this->Evento->getEvento()));                $this->Email->send('email_info', $user_email, $subject, $body, array('cc'=>$customer_data->email));              }              $success = true;              $responseType = 'function';              $function     = 'afterRegisterUser';              $messages     = $this->view('alerts/modal_alerts', array('texto'=>'<li>Usted se ha pre-inscripto para participar del evento '.$this->evento_name.'.<br>En breves instantes recibirá un email con todos los datos para realizar la transferencia.<br/>Por favor revise su bandeja de SPAM.</li>', 'title'=>$this->evento_name, 'class_type'=>'info'));              $data = array('success' =>$success,                'responseType'=>$responseType,                'html'=>$messages,                 'value'=>$function,                 'modal_redirect'=>lang_url('cart/finish'),                'evento_name' => $this->evento_name,                'userID' => filter_input(INPUT_POST,'fbId'));              break;            case 'pago_mis_cuentas':            #TODO              /*              $user_info  = $this->db->get_where('acreditados',array('id'=>$id, ))->row();                                                  $user_email = $user_info->email;              $subject    = "PreAcreditación ".$this->evento_name;              $body       = $this->view('email/pago_mis_cuentas',array('user_info'=>$user_info, 'evento'=>$this->Evento->getEvento()));              $email      = $this->Email->send('email_info', $user_email, $subject, $body);              if($email){              $success = true;              $responseType = 'function';              $function     = 'appendFormMessagesModal';              $messages     = $this->view('alerts/modal_alerts', array('texto'=>'<li>Usted se ha pre-inscripto para participar del evento '.$this->evento_name.'.<br>En breves instantes recibirá un email con todos los datos para pagar a través de Pago Mis Cuentas.<br/>Por favor revise su bandeja de SPAM.</li>', 'title'=>$this->evento_name, 'class_type'=>'info'));              $data = array('success' =>$success,              'responseType'=>$responseType,              'html'=>$messages,               'value'=>$function,               'modal_redirect'=>lang_url('cart/finish'),              'evento_name' => $this->evento_name,              'userID' => filter_input(INPUT_POST,'fbId'));              }              */              break;            case 'FOC':              $subject    = "Acreditación ".$this->evento_name;              foreach($nominar_batch as $k => $v){                $user_info  = (object) $v;                $user_email = $user_info->email;                  $body       = $this->view('email/adherente_iae',array('user_info'=>$user_info, 'evento'=>$this->Evento->getEvento()));                $this->Email->send('email_info', $user_email, $subject, $body, array('cc'=>$customer_data->email));              }              $success = true;              $responseType = 'function';              $function     = 'appendFormMessagesModal';              $messages     = $this->view('alerts/modal_alerts', array('texto'=>'<li>Usted se ha Inscripto para participar del evento '.$this->evento_name.'</li>', 'title'=>$this->evento_name, 'class_type'=>'info'));              $data = array('success' =>$success,                'responseType'=>$responseType,                'html'=>$messages,                 'value'=>$function,                 'modal_redirect'=>lang_url('cart/finish'),                'evento_name' => $this->evento_name,                'userID' => filter_input(INPUT_POST,'fbId'));              break;            }          }          return $data;          } catch (Exception $ex) {          $success      = true;          $responseType = 'function';          $function     = 'appendFormMessagesModal';          $messages     = $this->view('alerts/modal_alerts', array('texto'=>'<li>'.$ex->getMessage().'</li>', 'title'=>$this->evento_name, 'class_type'=>'info'));          $data         = array('success' =>$success,'responseType'=>$responseType, 'html'=>$messages, 'value'=>$function);                         return $data;        }      }    }                                         public function doUpdateAccount(){        #VALIDO FORM POR PHP                          #VALIDO FORM POR PHP                 $success = 'false';        $config = array();        $config[1] = array('field'=>'nombre', 'label'=>'Nombre', 'rules'=>'trim|required|xss_clean');        $config[2] = array('field'=>'apellido', 'label'=>'Apellido', 'rules'=>'trim|required|xss_clean');                 $config[3] = array('field'=>'empresa', 'label'=>'Empresa', 'rules'=>'trim|required|xss_clean');        $config[4] = array('field'=>'email', 'label'=>'Email', 'rules'=>'trim|required|xss_clean|valid_email');                 $this->form_validation->set_rules($config);                if($this->form_validation->run()==FALSE){            $this->form_validation->set_error_delimiters('<li>', '</li>');            $responseType = 'function';            $function     = 'appendFormMessagesModal';            $messages     = $this->view('alerts/modal_alerts',array('texto'=>validation_errors(), 'title'=>'Formulario de Contacto', 'class_type'=>'error'));            $data = array('success' => $success, 'responseType'=>$responseType, 'html'=>$messages, 'value'=>$function);        } else {          try{          $order_id = $this->session->userdata('cart_id');          $this->db->trans_start();           #VERIFICO QUE LA EMPRESA NO ESTE CREADA          $c_nombre = filter_input(INPUT_POST,'nombre');          $c_apellido = filter_input(INPUT_POST,'apellido');          $c_cargo = filter_input(INPUT_POST,'cargo');          $c_dni = filter_input(INPUT_POST,'dni');          $c_fecha_nacimiento = filter_input(INPUT_POST,'edad');          $c_telefono = filter_input(INPUT_POST,'telefono');          $c_conocio = filter_input(INPUT_POST,'conocio');          $c_enterprise = filter_input(INPUT_POST,'empresa');          $c_email = filter_input(INPUT_POST,'email');          $c_newsletter = 0;          $customer = $this->_validateEntreprise($c_enterprise, $c_email);          $this->db->flush_cache();          if(!$customer['total']){            if(!empty($c_fecha_nacimiento)){              $date =  DateTime::createFromFormat("d/m/Y", $c_fecha_nacimiento);              $c_fecha_nacimiento = $date->format('Y-m-d');            };            $customer_data = ['empresa' => $c_enterprise,               'cargo' => $c_cargo,              'nombre' => $c_nombre,              'apellido' => $c_apellido,              'fecha_nacimiento' =>  ($c_fecha_nacimiento) ? $c_fecha_nacimiento : null,              'dni'   => $c_dni,              'email' => $c_email,              'telefono' => $c_telefono,              'conocio' => $c_conocio,              'newsletter' => $c_newsletter,              'password' => md5(strtolower($c_dni)),              'status' => 1            ];            $values  = array_merge($customer_data, $this->i);                                           $this->db->insert('customers', $values);            $customer_data = (object) $values;            $customer_data->id = $this->db->insert_id();                    } else {            $customer_data = $customer['data'];          }          #GENERO LA ORDEN          $ticket = '';          $discount_code = '';          $quantity = 0;          $item_price = 0;          $discount_amount = 0;          $nominar = 0;          foreach ($this->cart->contents() as $key => $row) {            if(preg_match('/^code/', $row['id'], $matches) === 1){              $discount_code = $row['options']['code'];                  $discount_amount = $row['subtotal'];            }  else {              $nominar    = $row['options']['nominar'];              $item_price = $row['price'];              $quantity   = $row['qty'];              $ticket     = $row['options']['ticket_id'];            }          }          $values = ['customer_id'      => $customer_data->id,                    'evento_id'        => $this->evento_id,                    'ticket_id'        => $ticket,                    'full_cart'        => json_encode($this->cart->contents()),                    'gateway'          => ($this->session->userdata('cart_medio_pago')) ? $this->session->userdata('cart_medio_pago') : 'FOC',                    'item_price'       => $item_price,                    'quantity'         => $quantity,                    'total_price'      => $item_price*$quantity,                    'discount_code'    => $discount_code,                    'discount_amount'  => $discount_amount,                    'total_discounted_price' => $this->cart->total(),                    'status'           => 1,                  ];          $values  = array_merge($values, $this->u);          $this->db->where('id',$order_id);          $this->db->update('orders',$values);          $order_data = (object) $values;          $order_data->id = $order_id;          $this->session->set_userdata('cart_order',$order_data->id);                    #GENERO EL PAYMENT TRANSACTION -1 SIN REGISTRO          $payment = array(            'order_id'            => $order_data->id,             'payment_type'        => $order_data->gateway,            'transaction_amount'  => $this->cart->total(),            'currency_id'         => 'ARS',            'pago_status'         => ($order_data->gateway == 'FOC') ? 1 : '-1',             'status'              => ($order_data->gateway == 'FOC') ? 'approved' : 'in progress',          );                    $this->db->where('order_id', $otder_data->id );          $this->db->update('pagos',$payment);           $this->db->delete('acreditados', array('order_id' => $otder_data->id ));          $acreditados_last_id = $this->db->select_max('id')->get('acreditados')->row()->id;          $nominar_batch = [];          for($i=1;$i<=$nominar; $i++){            $acreditados_last_id++;            $data = ['customer_id' => $customer_data->id,              'evento_id'   => $this->evento_id,              'order_id'    => $order_data->id,              'nombre'      => $_POST['acreditado_nombre'][$i],              'apellido'    => $_POST['acreditado_apellido'][$i],              'email'       => $_POST['acreditado_email'][$i],              'barcode'     => $this->_getCode($acreditados_last_id),              'reminder'    => 0,              'acreditado'  => 0,              'status'      => 1            ];            array_push($nominar_batch, array_merge($data, $this->i, $this->u));          }          $this->db->insert_batch('acreditados', $nominar_batch);                     $transact = $this->db->trans_complete();                        if($transact){                                switch ($order_data->gateway) {              case 'mercado_pago':                $data   = $this->MP->getPreferences($order_data);                break;            case 'transferencia_bancaria':              $subject    = "PreAcreditación ".$this->evento_name;              foreach($nominar_batch as $k => $v){                $user_info  = (object) $v;                $user_email = $user_info->email;                  $body       = $this->view('email/pago_transferencia_bancaria', array('user_info'=>$user_info, 'evento'=>$this->Evento->getEvento()));                $this->Email->send('email_info', $user_email, $subject, $body, array('cc'=>$customer_data->email));              }              $success = true;              $responseType = 'function';              $function     = 'afterRegisterUser';              $messages     = $this->view('alerts/modal_alerts', array('texto'=>'<li>Usted se ha pre-inscripto para participar del evento '.$this->evento_name.'.<br>En breves instantes recibirá un email con todos los datos para realizar la transferencia.<br/>Por favor revise su bandeja de SPAM.</li>', 'title'=>$this->evento_name, 'class_type'=>'info'));              $data = array('success' =>$success,                'responseType'=>$responseType,                'html'=>$messages,                 'value'=>$function,                 'modal_redirect'=>lang_url('cart/finish'),                'evento_name' => $this->evento_name,                'userID' => filter_input(INPUT_POST,'fbId'));              break;            case 'pago_mis_cuentas':            #TODO              /*              $user_info  = $this->db->get_where('acreditados',array('id'=>$id, ))->row();                                                  $user_email = $user_info->email;              $subject    = "PreAcreditación ".$this->evento_name;              $body       = $this->view('email/pago_mis_cuentas',array('user_info'=>$user_info, 'evento'=>$this->Evento->getEvento()));              $email      = $this->Email->send('email_info', $user_email, $subject, $body);              if($email){              $success = true;              $responseType = 'function';              $function     = 'appendFormMessagesModal';              $messages     = $this->view('alerts/modal_alerts', array('texto'=>'<li>Usted se ha pre-inscripto para participar del evento '.$this->evento_name.'.<br>En breves instantes recibirá un email con todos los datos para pagar a través de Pago Mis Cuentas.<br/>Por favor revise su bandeja de SPAM.</li>', 'title'=>$this->evento_name, 'class_type'=>'info'));              $data = array('success' =>$success,              'responseType'=>$responseType,              'html'=>$messages,               'value'=>$function,               'modal_redirect'=>lang_url('cart/finish'),              'evento_name' => $this->evento_name,              'userID' => filter_input(INPUT_POST,'fbId'));              }              */              break;            case 'FOC':              $subject    = "Acreditación ".$this->evento_name;              foreach($nominar_batch as $k => $v){                $user_info  = (object) $v;                $user_email = $user_info->email;                  $body       = $this->view('email/adherente_iae',array('user_info'=>$user_info, 'evento'=>$this->Evento->getEvento()));                $this->Email->send('email_info', $user_email, $subject, $body, array('cc'=>$customer_data->email));              }              $success = true;              $responseType = 'function';              $function     = 'appendFormMessagesModal';              $messages     = $this->view('alerts/modal_alerts', array('texto'=>'<li>Usted se ha Inscripto para participar del evento '.$this->evento_name.'</li>', 'title'=>$this->evento_name, 'class_type'=>'info'));              $data = array('success' =>$success,                'responseType'=>$responseType,                'html'=>$messages,                 'value'=>$function,                 'modal_redirect'=>lang_url('cart/finish'),                'evento_name' => $this->evento_name,                'userID' => filter_input(INPUT_POST,'fbId'));              break;            }          }          return $data;             } catch (Exception $ex) {                $success      = true;                $responseType = 'function';                $function     = 'appendFormMessagesModal';                $messages     = $this->view('alerts/modal_alerts', array('texto'=>'<li>'.$ex->getMessage().'</li>', 'title'=>$this->evento_name, 'class_type'=>'info'));                $data         = array('success' =>$success,'responseType'=>$responseType, 'html'=>$messages, 'value'=>$function);                               return $data;            }        }                                    }    public function getNominados(){      $result = $this->db->get_where('acreditados',['order_id'=>$this->session->userdata('cart_id')])->result();      return $result;    }    private function _validateEntreprise($enterprise, $email){      $this->db->start_cache();      $this->db->select('*')        ->from('customers c')        ->where('c.empresa', $enterprise)        ->where('c.email', $email);         $this->db->stop_cache();                           return array('total' => $this->db->count_all_results(), 'data' => $this->db->get()->row());    }    private function _getCode ($id){        $codigoBarrasNumber      = str_pad($id,12,0,STR_PAD_LEFT);         $codigoBarrasFinalNumber = $this->_ean13_check_digit($codigoBarrasNumber);        $this->_generateCode($codigoBarrasNumber,$codigoBarrasFinalNumber);        return $codigoBarrasFinalNumber;    }    private function _generateCode($codigoBarrasNumber,$codigoBarrasFinalNumber){        $this->barcode->save($codigoBarrasNumber,$codigoBarrasFinalNumber);    }    private function _ean13_check_digit($digits){        //first change digits to a string so that we can access individual numbers        $digits =(string)$digits;        // 1. Add the values of the digits in the even-numbered positions: 2, 4, 6, etc.        $even_sum = $digits{1} + $digits{3} + $digits{5} + $digits{7} + $digits{9} + $digits{11};        // 2. Multiply this result by 3.        $even_sum_three = $even_sum * 3;        // 3. Add the values of the digits in the odd-numbered positions: 1, 3, 5, etc.        $odd_sum = $digits{0} + $digits{2} + $digits{4} + $digits{6} + $digits{8} + $digits{10};        // 4. Sum the results of steps 2 and 3.        $total_sum = $even_sum_three + $odd_sum;        // 5. The check character is the smallest number which, when added to the result in step 4,  produces a multiple of 10.        $next_ten    = (ceil($total_sum/10))*10;        $check_digit = $next_ten - $total_sum;        return $digits . $check_digit;    }}